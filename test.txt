// parking.cpp : This file contains the 'main' function.

//#include "pch.h"

#include <iostream>
#include <vector>
#include <algorithm> 

using namespace std;

//Parking class
class Parking {
private:
	int lane_length;  // parkinglane length
	vector<int> car_size;  // parking car sizes
	void find_parking_combinations_recursive(int, int);

	int check_car_size();
	int check_lane_length();

public:
	int combinations = 0;
	int number_car_size = 0;

	Parking(int, vector<int> const &);

	int get_lane_length() { return lane_length; }

	vector<int> get_car_size() { return car_size; }
	void print_car_size(vector<int> const &);

	int find_parking_combinations();

	int get_combinations() { return combinations; }
	void print_parking_combinations();
};

//Constructor
Parking::Parking(int _lane_length, vector<int> const & _car_size)
{
	int check;
	lane_length = _lane_length;
	check = check_lane_length();

	car_size = _car_size;
	check += check_car_size();

	number_car_size = (check < 0) ? 0 : car_size.size();
}

//check input lane length
int Parking::check_lane_length()
{
	// negative or zero lane length
	if (lane_length <= 0) {
		cout << "negative or zero lane length of " << lane_length << endl;
		return -1;
	}
	return 0;
}

//check input car_size 
int Parking::check_car_size()
{
	int check = 0;
	// empty car_size check
	if (car_size.size() == 0) {
		cout << "   [warning:] number of car size is zero." << endl;
		return -1;
	}

	// check if each car_size is valid
	for (int _size : car_size) {
		if (_size <= 0) {
			cout << "   [warning:] negative or zero car size of " << _size << endl;
			check = -2;
		}
		else if (_size > lane_length) {
			cout << "   [warning:] car size of " << _size << " is bigger than lane length of " << lane_length << endl;
			check = -3;
		}
		else {
		}
	}

	// check if car_size is unique
	vector<int> input_car_size(car_size);

	auto end = car_size.end();
	for (auto it = car_size.begin(); it != end; ++it) {
		end = remove(it + 1, end, *it);
	}
	car_size.erase(end, car_size.end());

	if (car_size.size() != input_car_size.size())
	{
		cout << "   [warning:] found duplicates in [car_size]" << endl;
		cout << "   [warning:] input ";
		print_car_size(input_car_size);
		cout << endl;

		cout << "   [warning:] remove duplicates, ";
		print_car_size(car_size);
		cout << endl;
	}

	return check;
}

void Parking::print_car_size(vector<int> const &_size)
{
	cout << "car size = {";
	for (unsigned int i = 0; i < _size.size() - 1; i++)
		cout << _size[i] << ",";
	cout << _size.back() << "}";
}

//recursive fundtion to find parking combinations, private function
void Parking::find_parking_combinations_recursive(int current_car, int current_lane_length)
{
	//recursive functions for parking options
	int current_size = car_size[current_car];
	int max_number_car = current_lane_length / current_size;

	if (number_car_size > current_car + 1) {
		for (int n = 0; n < max_number_car + 1; n++) {
			find_parking_combinations_recursive(current_car + 1, current_lane_length - n * current_size);
		}
	}
	else {
		if (current_lane_length%current_size == 0)
			combinations++;
	}
}

//find parking combinations
int Parking::find_parking_combinations()
{
	if (number_car_size > 0)
		find_parking_combinations_recursive(0, lane_length);
	return combinations;
}

//print parking combinations with input information
void Parking::print_parking_combinations()
{
	cout << "   - lane length = " << lane_length << ", ";
    print_car_size(car_size); 
	cout << ", combinations = " << combinations;
}

//Unit testing class
class ParkingTest {
private:
	//Data structur for Unit testing
	struct ParkingCase
	{
		int lane_length;
		vector<int> car_size;
		int expected_combinations;
	};
	int Test(int const, vector<int> const &, int const);
	vector<ParkingCase> cases;

public:
	// sequence of testing cases
	void runTest();
};

//call Parking class to get combinations
int ParkingTest::Test(int const lane_length, vector<int> const &car_size, int const expected_combinations)
{
	Parking test(lane_length, car_size);
	int combinations = test.find_parking_combinations();
	test.print_parking_combinations();
	cout << ", expected combinations=" << expected_combinations << endl;

	if (combinations == expected_combinations)
	{
		cout << "   ==> PASSED" << endl;
		return 1;
	}
	else {
		cout << "   ==> FAILED" << endl;
		return 0;
	}
}


void ParkingTest::runTest()
{
	//test case: {lane_length, car_size, expected_combinations};
	cases.push_back({ 30, {3, 4, 5}, 11 });
	cases.push_back({ 30, {3}, 1 });
	cases.push_back({ 30, {7}, 0 });
	cases.push_back({ 30, {7, 11}, 0 });
	cases.push_back({ 30, {2, 3, 4, 5}, 71 });
	cases.push_back({ 30, {-1}, 0 });
	cases.push_back({ 30, {0, 3, 5}, 0 });
	cases.push_back({ 30, {3, 4, 30}, 4 });
	cases.push_back({ 30, {3, 4, 31}, 0 });
	cases.push_back({ 30, {3, 4, 5, 3, 4, 5}, 11 });
	cases.push_back({ 30, {2, 3, 4, 5, 6}, 149 });

	cout << "Total number of tests: " << cases.size() << endl;

	int count = 0;
	for (unsigned int i = 0; i < cases.size(); i++)
	{
		cout << "Test " << i + 1 << ": " << endl;
		count += Test(cases[i].lane_length, cases[i].car_size, cases[i].expected_combinations);
	}

	cout << endl << "Summary: Passed " << count << " of " << cases.size() << " tests" << endl;
}

int main()
{
	//Solution for lane_length=30, car_size={3,4,5}
	cout << "---------------" << endl;
	cout << "Solution:" << endl;
	cout << "---------------" << endl;

	Parking parking(30, { 3, 4, 5 });
	parking.find_parking_combinations();
	parking.print_parking_combinations();

	//Unit Testing
	cout << endl << endl;
	cout << "---------------" << endl;
	cout << "Unit Testing:" << endl;
	cout << "---------------" << endl;

	ParkingTest Test;
	Test.runTest();
}
